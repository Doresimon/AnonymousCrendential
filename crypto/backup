'use strict'

const CTX = require("milagro-crypto-js");
const crypto = require('crypto');
const PARAM = require('./param.js');

const func = {
    get_g1(ctx) {
        let g1 = new ctx.ECP(0);    // new G1
        let x = new ctx.BIG(0);
        let y = new ctx.BIG(0);
        x.rcopy(ctx.ROM_CURVE.CURVE_Gx);
        y.rcopy(ctx.ROM_CURVE.CURVE_Gy);
        g1.setxy(x,y);
        return g1
    },
    get_g2(ctx) {
        let g2 = new ctx.ECP2(0);
        let x = new ctx.BIG(0);
        let y = new ctx.BIG(0);
        let qx = new ctx.FP2(0);
        let qy = new ctx.FP2(0);
        x.rcopy(ctx.ROM_CURVE.CURVE_Pxa);
        y.rcopy(ctx.ROM_CURVE.CURVE_Pxb);
        qx.bset(x, y);
        x.rcopy(ctx.ROM_CURVE.CURVE_Pya);
        y.rcopy(ctx.ROM_CURVE.CURVE_Pyb);
        qy.bset(x, y);
        g2.setxy(qx, qy);
        return g2
    },
    get_order(ctx){
        let r = new ctx.BIG(0);     // new BN
        r.rcopy(ctx.ROM_CURVE.CURVE_Order);
        return r
    }
}

const curve = 'BN254'
const ctx = new CTX(curve);   // set curve
const PAIR = ctx.PAIR;        // Set pairing interface
const ECP = ctx.ECP;        // Set pairing interface
const ECP2 = ctx.ECP2;        // Set pairing interface
const BIG = ctx.BIG;        // Set pairing interface
const rng = new ctx.RAND();   //new random number generator

const g1 = func.get_g1(ctx)       // g1
const g2 = func.get_g2(ctx)       // g2
const order = func.get_order(ctx) // n



function getRandBN(){
    const buf = crypto.randomBytes(256);
    rng.clean();
    rng.seed(256, buf);
    let r = ctx.BIG.randomnum(order, rng);
    return r
}
function getRandG1(){
    let r = getRandBN()
    let g = PAIR.G1mul(g1, r)
    return g
}
function getRandG2(){
    let r = getRandBN()
    let g = PAIR.G1mul(g2, r)
    return g
}
function hashToBN(...points){
    let all = []
    let tmp = []
    points.forEach(p => {
        if(Array.isArray(p)){
            if(typeof(p[0])=="number"){
                all = all.concat(p)
                tmp = []
            }else{
                p.forEach(pp => {
                    pp.toBytes(tmp)
                    all = all.concat(tmp)
                    tmp = []
                });
            }            
        }else{
            p.toBytes(tmp)
            all = all.concat(tmp)
            tmp = []
        }
    });
    let H = new ctx.HASH256();
    H.process_array(all);
    let R = H.hash();
    let C = ctx.BIG.fromBytes(R)
    C.mod(order)
    return C
}
function genAttrBN(attrs){
    let HAttr = []
    let r

    for (let i = 0; i < attrs.length; i++) {
        let t = getRandBN()
        HAttr[i] = t
    }

    return HAttr
}
function genAttrElement(attrs){
    let HAttr = []
    let r

    for (let i = 0; i < attrs.length; i++) {
        let t = getRandG1()
        HAttr[i] = t
    }

    return HAttr
}

let Issuer = {
    Setup(AttributeName){
        let HAttr = genAttrElement(AttributeName)

        let x = getRandBN()         // isk
        let w = PAIR.G2mul(g2, x)   // w

        let r = getRandBN()         // random number
        let _g1 =  PAIR.G1mul(g1, r)
        let _g2 =  PAIR.G1mul(_g1, x)

        // zkp - pi
        r = getRandBN()
        let t1 = PAIR.G2mul(g2, r)
        let t2 = PAIR.G1mul(_g1, r)

        let C = hashToBN(t1, t2, g2, _g1, w, _g2)

        let S = ctx.BIG.modmul(C, x, order)
        S.add(r)
        S.mod(order)

        let pi = {
            C: C,
            S: S,
        }

        let h0 = getRandG1()
        let h_sk = getRandG1()

        let isk = new ctx.BIG()
        isk.copy(x)

        let ipk = {
            w: w,
            _g1: _g1,
            _g2: _g2,
            attr: AttributeName,
            h: [],
            h0: h0,
            h_sk: h_sk,
            pi: pi,
        }

        HAttr.forEach(a => {
            ipk.h.push(a)
        });

        this.isk = isk
        this.ipk = ipk
    },
    VerifyPi(Nym, pi, n){
        let C = new BIG(0)
        C.copy(pi.C)

        // let _t1 = h_sk^S * Nym^(-C)
        let _t1 = new ctx.ECP()
        _t1 = PAIR.G1mul(this.ipk.h_sk, pi.S)
        _t1.add(PAIR.G1mul(Nym, BIG.modneg(C, order)))

        let _C = hashToBN(_t1, this.ipk.h_sk, Nym, n)

        return BIG.comp(pi.C, _C)==0
    },
    Sign(Nym, pi, attrs, n){
        // let v = this.VerifyPi(Nym, pi, n)        // verify pi
        // console.log('verify result = ',v)
        // if (!v) {   return false }
        
        // e, s
        let e = getRandBN()
        let s = getRandBN()
        let B = new ctx.ECP() // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))
        B.copy(g1)
        B.add(PAIR.G1mul(this.ipk.h0, s))
        B.add(Nym)
        for (let i = 0; i < this.ipk.attr.length; i++) {
            B.add(PAIR.G1mul(this.ipk.h[i], attrs[i]))
        }

        let A = new ctx.ECP() // A = B^(1/(e+x))
        let tmp = new ctx.BIG() //tmp = (1/(e+x))
        tmp.copy(e)
        tmp.add(this.isk) // !!!!!!!!!!!
        tmp.invmodp(order)

        A = PAIR.G1mul(B, tmp)

        let Credential = {
            sig:{
                A: A,
                B: B, 
                e: e,
                s: s,
            },
            Attrs: attrs,
        }
        return Credential
    },
    getIpkBytes(){},
}

let User = {
    Setup(attrName, issuer_ipk, n){
        const ipk = this.ipk
        // attrs
        let gsk = getRandBN()                       // gsk
        let Nym = PAIR.G1mul(ipk.h_sk, gsk)         // Nym

        let r = getRandBN()                         // r
        let t1 = PAIR.G1mul(ipk.h_sk, r)            // t1

        let C = hashToBN(t1, ipk.h_sk, Nym, n)

        let S = ctx.BIG.modmul(C, gsk, order)
        S.add(r)
        S.mod(order)

        let pi = {
            C: C,
            S: S,
        }

        let attrs = genAttrBN(attrName)

        this.gsk = gsk
        this.Nym = Nym
        this.pi = pi
        this.attrs = attrs

        return
    },
    VerifyBBSplus(ipk, m, sig, Nym){
        // pk   <- ipk.w
        // m    <- attrs
        // sig  <- (A,E,s)

        // check if 
        // e(A, g2^E * pk) == e(B, g2) 
        // and if 
        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL).

        let wg2e = new ECP2()
        wg2e.copy(ipk.w)
        wg2e.add(PAIR.G2mul(g2, sig.e))
        wg2e.affine()                       // ~!!!!use affine() after ECP's mul operation, for pairing.
        let left = PAIR.ate(wg2e, sig.A)
        left = PAIR.fexp(left);

        let B = new ECP()
        B.copy(g1)
        B.add(PAIR.G1mul(ipk.h0, sig.s))
        B.add(Nym)

        for (let i = 0; i < m.length; i++) {
            B.add(PAIR.G1mul(ipk.h[i], m[i]))
        }

        B.affine()
        let right = PAIR.ate(g2, B)
        right = PAIR.fexp(right);

        return left.toString() == right.toString()
    },
    Prove(D){
        const ipk = this.ipk
        const Credential = this.Credential

        let r1 = getRandBN()                        // r1

        let A_ = PAIR.G1mul(Credential.sig.A, r1)   // A'

        // console.log("r1: ", r1.toString())

        let r3 = new BIG(0)                         // r3
        r3.copy(r1)
        r3.invmodp(order)

        // console.log("r1: ", r1.toString())

        let _e = new BIG(0)                         // -e
        _e.copy(Credential.sig.e)
        _e = BIG.modneg(_e, order)

        // console.log("e-e: ", Credential.sig.e.toString())
        // console.log("e: ", Credential.sig.e.toString())
        // console.log("-e: ", _e.toString())
        // console.log("r1: ", r1.toString())

        let _A = PAIR.G1mul(A_, _e)                 // _A
        _A.add(PAIR.G1mul(Credential.sig.B, r1))



        // A_.affine()
        // ipk.w.affine()
        // _A.affine()
        // g2.affine()

        // let left = PAIR.ate(ipk.w, A_)
        // let right = PAIR.ate(g2, _A)

        // console.log("A_: ", A_.toString())
        // console.log("ipk.w: ", ipk.w.toString())
        // console.log("_A: ", _A.toString())
        // console.log("g2: ", g2.toString())
        // console.log("left: ", left.toString())
        // console.log("right: ", right.toString())





        // console.log("r1: ", r1.toString())

        let r2 = getRandBN()                        // r2
        let _r2 = new BIG(0)                        // -r2
        _r2.copy(r2)
        _r2 = BIG.modneg(_r2, order)

        // console.log("r1: ", r1.toString())

        let B_ = PAIR.G1mul(Credential.sig.B, r1)   // B'
        B_.add(PAIR.G1mul(ipk.h0, _r2))

        // console.log("r1: ", r1.toString())

        let s_ = BIG.modmul(r2, r3, order)          // s'
        s_ = BIG.modneg(s_, order)
        s_.add(Credential.sig.s)
        s_.mod(order)

        // console.log("r1: ", r1.toString())

        
        let r_a = []                                // r_a[]
        for (let i = 0; i < D.length; i++) {
            if (D[i]==0) {
                r_a[i] = getRandBN()
            }else{
                r_a[i] = false
            }
        }

        // console.log("r1: ", r1.toString())

        let r_e = getRandBN()
        let r_r2 = getRandBN()
        let r_r3 = getRandBN()
        let r_s_ = getRandBN()
        let r_sk = getRandBN()

        let E = PAIR.G1mul(ipk.h_sk, r_sk)                // E

        let t1 = PAIR.G1mul(A_, r_e)                      // t1
        t1.add(PAIR.G1mul(ipk.h0, r_r2))

        let t2 = PAIR.G1mul(B_, r_r3)                     // t2
        t2.add(PAIR.G1mul(ipk.h0, r_s_))
        t2.add(PAIR.G1mul(E, new BIG(-1)))
        for (let i = 0; i < r_a.length; i++) {
            if(r_a[i]!=false){
                t2.add(PAIR.G1mul(ipk.h[i], r_a[i]))
            }
        }

        // console.log("r1: ", r1.toString())

        // var bf = new Buffer(bsn)
        // let nym =  PAIR(ECP.mapit(bf), this.gsk)    //gym

        // c' = H(A', _A, B', nym, t1, t2, g1, HRand, h1, ... , hL, w)
        let c_ = hashToBN(A_, _A, B_, this.Nym, t1, t2, g1, ipk.h0, ipk.h, ipk.w) 

        // console.log("A_, ", A_.toString())
        // console.log("_A, ", _A.toString())
        // console.log("B_, ", B_.toString())
        // console.log("nym, ",this.Nym.toString())
        // console.log("t1, ", t1.toString())
        // console.log("t2, ", t2.toString())
        // console.log("g1, ", g1.toString())
        // console.log("ipk.h0, ", ipk.h0.toString())
        // console.log("ipk.w, ", ipk.w.toString())

        let nonce = getRandBN()
        // c = H(nonce, c', (D, I))
        let c = hashToBN(nonce, c_, D, this.attrs)

        let s_sk = new BIG(0)
        s_sk.copy(r_sk)
        s_sk.add(BIG.modmul(c, this.gsk, order))
        s_sk.mod(order)

        // console.log("r1: ", r1.toString())

        let s_a = []
        for (let i = 0; i < D.length; i++) {
            if (D[i]==0) {
                s_a[i] = new BIG(0)
                s_a[i].copy(r_a[i])
                s_a[i].sub(BIG.modmul(c, this.attrs[i], order))
                s_a[i].mod(order)
            }else{
                s_a[i] = false
            }
        }

        let s_e = new BIG(0)
        s_e.copy(r_e)
        s_e.sub(BIG.modmul(c, Credential.sig.e, order))
        s_e.mod(order)

        let s_r2 = new BIG(0)
        s_r2.copy(r_r2)
        s_r2.add(BIG.modmul(c, r2, order))
        s_r2.mod(order)

        let s_r3 = new BIG(0)
        s_r3.copy(r_r3)
        s_r3.add(BIG.modmul(c, r3, order))
        s_r3.mod(order)

        let s_s_ = new BIG(0)
        s_s_.copy(r_s_)
        s_s_.sub(BIG.modmul(c, s_, order))
        s_s_.mod(order)

        let pi = {
            c:      c,
            s_sk:   s_sk,
            s_a:    s_a,
            s_e:    s_e,
            s_r2:   s_r2,
            s_r3:   s_r3,
            s_s_:   s_s_,
            nonce:  nonce,
        }

        let proof = {
            A_:     A_,
            _A:     _A,
            B_:      B_,
            nym:    this.Nym,
            pi:     pi,
        }

        // console.log("r1: ", r1.toString())

        return proof
    },
    Verify(proof, D, attrs){
        const ipk = this.ipk
        let one = new ECP(1)
        let is_one = proof.A_.equals(one)


        if (is_one) {
            console.log("A' == 1 return true, verify failed.")
            return false
        }

        let A_ = new ECP()
        A_.copy(proof.A_)
        let w = new ECP2()
        w.copy(ipk.w)
        let _A = new ECP()
        _A.copy(proof._A)
        let g2_dup = new ECP2()
        g2_dup.copy(g2)

        A_.affine()
        w.affine()
        _A.affine()
        g2_dup.affine()

        let left = PAIR.ate(w, A_)
        let right = PAIR.ate(g2_dup, _A)

        left = PAIR.fexp(left)
        right = PAIR.fexp(right)

        // console.log("A_: ", A_.toString())
        // console.log("w: ", w.toString())
        // console.log("_A: ", _A.toString())
        // console.log("g2_dup: ", g2_dup.toString())
        // console.log("left: ", left.toString())
        // console.log("right: ", right.toString())

        if (!left.equals(right)) {
            console.log("e(A', w) == e(_A, g2) return false, verify failed.")
            return false
        }

        // ok
        _A.copy(proof._A)
        let _t1 = PAIR.G1mul(A_, proof.pi.s_e) 
        _t1.add(PAIR.G1mul(ipk.h0, proof.pi.s_r2))
        _A.sub(proof.B_)
        _t1.add(PAIR.G1mul(_A, BIG.modneg(proof.pi.c, order)))

        // !!!!!!!!!有问题
        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)
        let _t2 = PAIR.G1mul(proof.B_, proof.pi.s_r3)
        _t2.add(PAIR.G1mul(ipk.h0, proof.pi.s_s_))
        _t2.add(PAIR.G1mul(ipk.h_sk, BIG.modneg(proof.pi.s_sk, order)))

        let sum = new ECP()
        sum.copy(g1)
        for (let i = 0; i < D.length; i++) {
            if (D[i]==0) {
                // _t2.add(PAIR.G1mul(ipk.h[i], BIG.modneg(proof.pi.s_a[i], order)))
                _t2.add(PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]))
            }else{
                sum.add(PAIR.G1mul(ipk.h[i], attrs[i]))
            }   
                   
        }

        _t2.add(PAIR.G1mul(sum, BIG.modneg(proof.pi.c, order)))

        let c1 = hashToBN(proof.A_, proof._A, proof.B_, proof.nym, _t1, _t2, g1, ipk.h0, ipk.h, ipk.w)
        // console.log() 
        // console.log("A_, ", proof.A_.toString())
        // console.log("_A, ", proof._A.toString())
        // console.log("B_, ", proof.B_.toString())
        // console.log("nym, ", proof.nym.toString())
        // console.log("_t1, ", _t1.toString())
        // console.log("_t2, ", _t2.toString())
        // console.log("g1, ", g1.toString())
        // console.log("ipk.h0, ", ipk.h0.toString())
        // console.log("ipk.w, ", ipk.w.toString())

        let c2 = hashToBN(proof.pi.nonce, c1, D, attrs) 

       

        // console.log("### c ### ")
        // console.log(proof.pi.c.toString())

        // console.log("### c' ### ")
        // console.log(c2.toString())

        if (!c2.minus(proof.pi.c).iszilch()) {
            console.log("c == H(nonce, H(A', _A, B', nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.")
            return false
        }

        return true
    },
}

main()

function main(){
    /* public parameter */
    let AttributeName = [
        '24',
        'master',
        'male',
        'handsome',
    ]
    let Disclosure = [
        1,
        0,
        1,
        0,
    ]
    /* issuer setup */
    Issuer.Setup(AttributeName)
    console.log("Issuer.publish(ipk)")

    User.ipk = Issuer.ipk
    console.log("User.save(Issuer.ipk)")

    /* issuer generate a random nonce number */
    let n = getRandBN()
    console.log("Issuer.send(n)")

    /* user */
    User.Setup(AttributeName, Issuer.ipk, n)
    console.log("User.send(Nym, pi)")

    let v = Issuer.VerifyPi(User.Nym, User.pi, n)        // verify pi
    console.log("Issuer.VerifyPi(Nym, pi, n)")
    console.log(v)
    if (!v) {   return false }
    
    let Credential = Issuer.Sign(User.Nym, User.pi, User.attrs, n)
    console.log("Issuer.send(Credential)")

    let uv = User.VerifyBBSplus(Issuer.ipk, Credential.Attrs, Credential.sig, User.Nym)
    console.log("User.verify(Credential)")
    console.log(uv)

    User.Credential = Credential
    console.log("User.save(Credential)")

    /* @inputs 
            D: Disclosure of attributes.
            Nonce: a non-sense string for fresh.
     * @output    
    
    
    */  
    let proof = User.Prove(Disclosure)
    console.log("User.prove(Credential)")


    let r = User.Verify(proof, Disclosure, User.attrs)
    console.log("User.Verify(proof, Disclosure, attrs)")
    console.log(r)
}